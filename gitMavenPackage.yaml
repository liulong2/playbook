- name: mysql
  hosts: gitmavenproject
  become: true
  become_user: root
  tasks:
    - name: remove
      shell: "rm -r {{path}}"
      ignore_errors: true
    - name: git test
      git:
        repo: "http:// (lml | urlencode) : (lml123456 | urlencode) @{{gitlabpackage}}"
        dest: "{{clonepath}}"
        #放弃本地储存库的修改
        force: yes
#        需要打包的分支
        version: master
#        下载项目依赖
    - name: download pom
      shell: "chdir={{clonepath}} mvn -f pom.xml clean install"
      when: downloadrely
#      在项目中创建docker文件夹
    - name: file docker
      file:
        path: "{{clonepath}}/docker"
        state: directory
        mode: 777
        recurse: yes
#    将Dockerfile.j2模板传送到西相应的文件
    - name: template Dockerfile.j2
      template: src="/dockersh/docker/Dockerfile.j2" dest="{{clonepath}}/docker/Dockerfile"

#    删除src的test文件夹,会造成打包失败
    - name: remove package test path
      shell: "rm -r {{clonepath}}/src/test"
      ignore_errors: true
#      删除之前的jar
    - name: maven clean
      shell: "chdir={{clonepath}} mvn clean"
#    执行maven打包
    - name: maven package
      shell: "chdir={{clonepath}} mvn package"
#      执行docker build
    - name: maven docker build
      shell: "chdir={{clonepath}} mvn docker:build"
#      执行 docker push
    - name: maven push
      shell: "chdir={{clonepath}} mvn docker:push"



- name: mysql
  hosts: gitmavenproject
# hosts: dockerrun
  become: true
  become_user: root
  tasks:
#      在指定位置创建目录
    - name: file /usr/local/service-center/docker/{{dockerfile}}
      file:
        path: "/usr/local/service-center/docker/{{dockerfile}}"
        state: directory
        mode: 777
        recurse: yes
        #将docker-compose.tmp复制到相应路径
    - name: template docker-compose.tmp.j2
      template: src="/docker-compose/docker-compose.tmp.j2" dest="/usr/local/service-center/docker/{{projectName}}/docker-compose.tmp"
    #      backup=yes 可以在覆盖前进行备份文件
    #    .sh文件传送到远程服务器
    - name: copy file
      copy:
        src: "/dockersh/"
        dest: "/usr/local/service-center/docker/{{dockerfile}}"
        mode: +x
    - name:  shell start.sh
      shell:
        chdir: /usr/local/service-center/docker/{{dockerfile}}
        cmd: ./start.sh {{version}}
#      when为true或yes的时候才会执行上面的命令
      when: not reboot
    - name: shell rstart.sh
      shell:
        chdir: /usr/local/service-center/docker/{{dockerfile}}
        cmd: ./rstart.sh {{version}}
      when: reboot




